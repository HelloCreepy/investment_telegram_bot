import pyqrcode
from telegram import Update, Bot, ParseMode, ChatAction
import jsonrpclib

import os
from datetime import datetime as dt, timedelta as td

from core import rates
from components import keyboards, texts
from core import database as db
from core.decorators import log, pass_user, metrica, sql_rollback, handler_log
from settings import config as cfg


# –¢—Ä–µ–π–¥–∏–Ω–≥
def get_token_rates(days_to=0):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–∑ –±–¥ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —Ç–æ–∫–µ–Ω–∞ SFI –≤ —Ñ–æ—Ä–º–∞—Ç–µ
    {'rub': ..., 'usd': ..., 'btc': ...,}
    :param days_to: –æ—Ç—Å—Ç—É–ø –≤ –¥–Ω—è—Ö –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    :return: –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö
    :rtype: FundHist
    """
    day = dt.now() - td(days=days_to)
    row = db.session.query(db.FundHist).\
        filter_by(day=day.date()).first()
    if not row:
        prev = day - td(days=1)
        row = db.session.query(db.FundHist).\
            filter_by(day=prev.date()).first()

    rates = {
        'rub': row.token_rub,
        'usd': row.token_usd,
        'btc': row.token_btc
    } if row else {}

    return rates


def format_token_data(rates, week_rates):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –∏–Ω–≤–∞–ª–∏–¥–Ω—ã - –Ω–µ –≤—ã–≤–æ–¥–∏—Ç
    :param rates: –∫—É—Ä—Å—ã —Ç–æ–∫–µ–Ω–∞
    :param week_rates: –∫—É—Ä—Å—ã 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    :return: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–µ
    :rtype: dict
    """
    calc_percent = lambda x, y: round((x / y - 1) * 100, 2)
    arrow = lambda x: 'üå≤' if x > 0 else 'üîª'
    data = {}

    for currency in ['rub', 'usd', 'btc']:
        if (rates and week_rates and
                rates[currency] > 0 and week_rates[currency] > 0):
            rate = round(rates[currency], cfg.CURRENCY_FMT[currency])
            percent = calc_percent(rates[currency], week_rates[currency])
            data[currency] = f"{rate} {arrow(percent)}{percent}%"
        else:
            data[currency] = f"<i>—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</i>"
    return data


def get_token_data(token):
    """
    –ü–æ–ª—É—á–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢—Ä–µ–π–¥–∏–Ω–≥–∞
    :param token: –ø–æ–∫–∞ —á—Ç–æ –æ–Ω —Ç—É—Ç –ø—Ä–æ—Å—Ç
    :return: –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–ª—é—Ç–∞–º –¥–ª—è –¢—Ä–µ–π–¥–∏–Ω–≥–∞
    :rtype: dict
    """
    rates = get_token_rates()
    week_rates = get_token_rates(7)
    return format_token_data(rates, week_rates)


def get_callback_data(upd):
    data = upd.callback_query.data
    return data


@sql_rollback
@metrica
@handler_log
def token(bot: Bot, update: Update, **kwargs):
    """
    –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–¢—Ä–µ–π–¥–∏–Ω–≥"
    :param bot: telegram bot
    :param update: incoming update
    :param kwargs: others kwargs
    """
    token = 'sredafund:index'  # update.callback_query.data
    output = {
        'token': token,
        **get_token_data(token)
    }
    bot.send_message(
        chat_id=update.message.chat_id, parse_mode=ParseMode.HTML,
        text=texts.trading.format(**output), reply_markup=keyboards.trading('SFI')
    )


@sql_rollback
@handler_log
def back(bot: Bot, update: Update):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ—Ç–æ—Ä–≥–æ –ø—Ä–∏—à–µ–ª –∞–ø–¥–µ–π—Ç –≤ "–¢—Ä–µ–π–¥–∏–Ω–≥"
    :param bot: telegram bot
    :param update: incoming update
    :param kwargs: others kwargs
    """
    token = 'sredafund:index'  # update.callback_query.data
    output = {
        'token': token,
        **get_token_data(token)
    }
    bot.edit_message_text(
        chat_id=update.callback_query.message.chat_id, parse_mode=ParseMode.HTML,
        text=texts.trading.format(**output), reply_markup=keyboards.trading('SFI'),
        message_id=update.callback_query.message.message_id
    )


# –ì—Ä–∞—Ñ–∏–∫
def fmt_motion(currency, period, today_rate, rate):
    """"""
    eng_works = "<i>—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</i>"
    if not (today_rate and rate):
        return eng_works

    arrow = lambda x: 'üå≤' if x > 0 else 'üîª'
    sign = lambda x: '+' + str(x) if x > 0 else x

    profit = round(today_rate - rate, cfg.CURRENCY_FMT[currency])
    percent = round((today_rate / rate - 1) * 100, 2)

    motion = (f"–ó–∞ {period}   {sign(profit)}{currency.upper()}"
              f" Ô∏èÔ∏è {arrow(profit)}{percent}%")
    return motion


def get_token_motion(period, currency):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è caption
    :param currency: –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
    :param period: –ø–µ—Ä–∏–æ–¥ –ø–æ–¥—Å—á–µ—Ç–∞
    :return: —Å—Ç—Ä–æ–∫–∞ —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é
    :rtype: str
    """
    if period == 'all':
        first_day = dt(2017, 6, 5).date()
        first = db.session.query(db.FundHist).\
            filter_by(day=first_day).first()
        start = {
            'rub': first.token_rub,
            'usd': first.token_usd,
            'btc': first.token_btc
        }
    else:
        start = get_token_rates(days_to=30)
    now = get_token_rates()

    if now and start:
        translate = {
            'all': '–≤—Å–µ –≤—Ä–µ–º—è',
            'month': '–º–µ—Å—è—Ü'
        }
        return fmt_motion(currency, translate[period],
                          now[currency], start[currency])
    else:
        return ''


@sql_rollback
@metrica
@handler_log
def chart(bot: Bot, update: Update):
    """
    –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–∫–µ–Ω–∞ SFI
    :param bot: telegram bot
    :param update: incoming update
    :param kwargs: others kwargs
    """
    bot.send_chat_action(
        chat_id=update.callback_query.message.chat_id,
        action=ChatAction.UPLOAD_PHOTO
    )
    if update.callback_query.message.photo:
        bot.delete_message(chat_id=update.callback_query.message.chat_id,
                           message_id=update.callback_query.message.message_id)

    # callback_data example: 'chart_rub_month'
    callback_data = get_callback_data(update).split('_')[1:]
    base, period = callback_data

    img = '_'.join(['chart_sfi', base, period])
    with open(f'static/{img}.png', 'rb') as chart:
        bot.send_photo(chat_id=update.callback_query.message.chat_id,
                       photo=chart, reply_markup=keyboards.chart(base, period),
                       caption=get_token_motion(period, base))


@metrica
@handler_log
def sell_tokens(bot: Bot, update: Update):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–∞
    :param bot: telegram bot
    :param update: incoming update
    :param kwargs: others kwargs
    """
    bot.send_message(
        chat_id=update.callback_query.message.chat_id,
        text=texts.trading_sell_token, parse_mode=ParseMode.HTML
    )


def get_personal_address(partner_id, type_):

    partner_addr = db.session.query(db.PartnersAddress).\
        filter_by(partner_id=partner_id, type=type_, testnet=False).first()

    if partner_addr:
        addr = partner_addr.addr
    else:

        server = jsonrpclib.Server(
            "http://sreda:{password}@127.0.0.1:{port}".format(**cfg.RPC[type_]))
        addr = server.getnewaddress()

        entry = db.PartnersAddress(
            partner_id=partner_id,
            type=type_,
            addr=addr,
            testnet=False)
        db.session.add(entry)
        db.commit()

    return addr


@sql_rollback
@metrica
@pass_user
@handler_log
def buy_token(bot: Bot, update: Update, user):
    """
    :param bot: telegram bot
    :param update: incoming update
    :param kwargs: others kwargs
    """
    if not user.partner_id:
        bot.answer_callback_query(
            callback_query_id=update.callback_query.id,
            text='–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏. –ù–∞–∂–º–∏—Ç–µ '
                 '–Ω–∞ –∫–Ω–æ–ø–∫—É "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"',
            show_alert=True
        )
        return

    bot.send_message(
        chat_id=update.callback_query.message.chat_id,
        parse_mode=ParseMode.HTML, text=texts.trading_invest,
        message_id=update.callback_query.message.message_id,
        reply_markup=keyboards.trading_invest()
    )


@metrica
@handler_log
def payment_method_btc(bot: Bot, update: Update):
    """
    :param bot: telegram bot
    :param update: incoming update
    :param kwargs: others kwargs
    """
    bot.edit_message_reply_markup(
        chat_id=update.callback_query.message.chat_id,
        message_id=update.callback_query.message.message_id,
        reply_markup=keyboards.trading_invest(btc=True)
    )


@metrica
@handler_log
def payment_method_bch(bot: Bot, update: Update):
    """
    :param bot: telegram bot
    :param update: incoming update
    :param kwargs: others kwargs
    """
    # bot.edit_message_reply_markup(
    #     chat_id=update.callback_query.message.chat_id,
    #     message_id=update.callback_query.message.message_id,
    #     reply_markup=keyboards.trading_invest(xem=True)
    # )
    bot.edit_message_reply_markup(
        chat_id=update.callback_query.message.chat_id,
        message_id=update.callback_query.message.message_id,
        reply_markup=keyboards.trading_invest(bch=True)
    )


@metrica
@handler_log
def payment_method_zec(bot: Bot, update: Update):
    """
    :param bot: telegram bot
    :param update: incoming update
    :param kwargs: others kwargs
    """
    # bot.edit_message_reply_markup(
    #     chat_id=update.callback_query.message.chat_id,
    #     message_id=update.callback_query.message.message_id,
    #     reply_markup=keyboards.trading_invest(xem=True)
    # )
    bot.edit_message_reply_markup(
        chat_id=update.callback_query.message.chat_id,
        message_id=update.callback_query.message.message_id,
        reply_markup=keyboards.trading_invest(zec=True)
    )


def send_qr(bot, chat_id, addr, type_):
    qr_path = 'static/qr-codes/'
    qr_name = f'{chat_id}_{type_}.png'
    if qr_name not in os.listdir(path=qr_path):
        pyqrcode.create(addr).png(qr_path + qr_name, scale=10)

    with open(qr_path + qr_name, 'rb') as qr_code:
        bot.send_photo(
            photo=qr_code, chat_id=chat_id,
            caption=texts.treading_qr_caption.format(currency=type_.upper()))


@sql_rollback
def send_requisites(bot, update_id, user, type_):
    token_price = {
        'btc': rates.get_SFIBTC,
        'bch': rates.get_SFIBCH,
        'zec': rates.get_SFIZEC
    }[type_]()
    addr = get_personal_address(user.partner.id, type_=type_)

    if not (token_price and addr):
        bot.answer_callback_query(
            callback_query_id=update_id,
            text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', show_alert=True
        )
        return

    output = {
        'rate': token_price,
        'addr': addr,
        'currency': type_.upper()
    }
    bot.send_message(
        chat_id=user.telegram_id, parse_mode=ParseMode.HTML,
        text=texts.treading_buy.format(**output)
    )
    send_qr(bot, user.telegram_id, addr, type_)


@metrica
@pass_user
@handler_log
def pay_btc(bot: Bot, update: Update, user):
    """
    :param bot: telegram bot
    :param update: incoming update
    :param user: instance of the current bot user
    :param kwargs: others kwargs
    """
    send_requisites(bot, update.callback_query.id, user, 'btc')


@metrica
@pass_user
@handler_log
def pay_bch(bot: Bot, update: Update, user):
    """
    :param bot: telegram bot
    :param update: incoming update
    :param user: instance of the current bot user
    :param kwargs: others kwargs
    """
    send_requisites(bot, update.callback_query.id, user, 'bch')


@metrica
@pass_user
@handler_log
def pay_zec(bot: Bot, update: Update, user):
    """
    :param bot: telegram bot
    :param update: incoming update
    :param user: instance of the current bot user
    :param kwargs: others kwargs
        """
    send_requisites(bot, update.callback_query.id, user, 'zec')
